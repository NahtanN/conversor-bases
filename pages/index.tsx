import {
  Box,
  Button,
  Container,
  createStyles,
  Paper,
  Select,
  TextInput,
} from "@mantine/core";
import { showNotification } from "@mantine/notifications";
import Head from "next/head";
import { ChangeEvent, useEffect, useState } from "react";
import {
  binaryToBaseX,
  decimalToBaseX,
  hexadecimalToBaseX,
  octalToBaseX,
} from "../utils";
import { BaseType, validateBaseRules } from "../validations";

const bases = [
  { value: "2", label: "2 - Binário" },
  { value: "8", label: "8 - Octal" },
  { value: "10", label: "10 - Decimal" },
  { value: "16", label: "16 - Hexadecimal" },
];

export default function Home() {
  const { classes } = useClasses();

  const [valueBase, setValueBase] = useState<string | null>(null);
  const [baseConversion, setBaseConversion] = useState<string | null>(null);
  const [valueInput, setValueInput] = useState("");
  const [resultValue, setResultValue] = useState("");

  const handleValidations = (event: ChangeEvent<HTMLInputElement>) => {
    const target = event.currentTarget.value;
    const lastChar = target.charAt(target.length - 1);

    if (target === "" || target === " ") {
      setValueInput(target);
    }

    if (!valueBase) {
      showNotification({
        message: "Você precisa selecionar a base do valor antes de digitar!",
        color: "red",
      });
      return;
    }

    if (!validateBaseRules(lastChar, valueBase as BaseType)) {
      return;
    }

    setValueInput(target.toUpperCase());
  };

  const handleConvert = () => {
    if (!baseConversion || !valueBase) {
      showNotification({
        message: "Você precisa selecionar as bases antes de converter!",
        color: "red",
      });
      return;
    }

    switch (valueBase as BaseType) {
      case "2": {
        const result = binaryToBaseX(valueInput, baseConversion);

        if (result) return setResultValue(result);

        showNotification({
          message: "Ainda não implemetado!",
          color: "yellow",
        });

        break;
      }
      // case "8": {
      //   const result = octalToBaseX(valueInput, baseConversion);
      //   // setResultValue(result);
      //   break;
      // }
      case "10": {
        const result = decimalToBaseX(valueInput, baseConversion);
        setResultValue(result);
        break;
      }
      // case "16": {
      //   const result = hexadecimalToBaseX(valueInput, baseConversion);
      //   // setResultValue(result);
      //   break;
      // }
      default:
        showNotification({
          message: "Ainda não implemetado!",
          color: "yellow",
        });
    }
  };

  useEffect(() => {
    if (valueBase === baseConversion) {
      setBaseConversion(null);
    }

    setValueInput("");
  }, [valueBase]);

  return (
    <div>
      <Head>
        <title>Conversor</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div
        style={{
          minHeight: "100vh",
          display: "flex",
          alignItems: "center",
        }}
      >
        <Container
          style={{
            width: "30rem",
          }}
        >
          <Paper className={classes.paperContainer}>
            <div className={classes.selectionGroup}>
              <Select
                required
                label="Base do valor"
                data={bases}
                value={valueBase}
                onChange={setValueBase}
                transition="pop-top-left"
                transitionDuration={80}
                transitionTimingFunction="ease"
              />
              <Select
                required
                label="Base da conversão"
                data={bases.filter((b) => b.value !== valueBase)}
                value={baseConversion}
                onChange={setBaseConversion}
                transition="pop-top-left"
                transitionDuration={80}
                transitionTimingFunction="ease"
              />
            </div>
            <TextInput
              label="Valor"
              required
              value={valueInput}
              onChange={handleValidations}
            ></TextInput>

            <Button onClick={handleConvert}>Converter</Button>

            <Box className={classes.box}>{resultValue}</Box>
          </Paper>
        </Container>
      </div>
    </div>
  );
}

const useClasses = createStyles((theme) => ({
  paperContainer: {
    width: "100%",
    display: "flex",
    flexDirection: "column",
    gap: "1rem",
  },

  selectionGroup: {
    display: "flex",
    gap: "1rem",

    justifyContent: "space-between",

    ["@media (max-width: 425px)"]: {
      flexDirection: "column",
    },
  },

  box: {
    maxWidth: "475px",
    maxHeight: "123px",
    wordBreak: "break-all",
    backgroundColor:
      theme.colorScheme === "dark"
        ? theme.colors.dark[6]
        : theme.colors.gray[0],
    textAlign: "center",
    padding: theme.spacing.xl,
    borderRadius: theme.radius.md,

    "&:hover": {
      backgroundColor:
        theme.colorScheme === "dark"
          ? theme.colors.dark[5]
          : theme.colors.gray[1],
    },
  },
}));
